---
apiVersion: v1
kind: Secret
metadata:
  name: appservices-secrets
  namespace: social
type: Opaque
stringData:
  mautrix-slack.yaml: |-
    id: mautrix-slack
    url: http://slack-bridge.social.svc.cluster.local:29335
    as_token: ${SECRET_MAUTRIX_SLACK_AS_TOKEN}
    hs_token: ${SECRET_MAUTRIX_SLACK_HS_TOKEN}
    sender_localpart: ${SECRET_MAUTRIX_SLACK_LOCALPART}
    rate_limited: false
    namespaces:
      users:
        - regex: '${SECRET_MAUTRIX_SLACK_REGEX_DOMAIN}'
          exclusive: false
    de.sorunome.msc2409.push_ephemeral: true
    receive_ephemeral: true
  doublepuppet.yaml: |-
    # The ID doesn't really matter, put whatever you want.
    id: doublepuppet
    # The URL is intentionally left empty (null), as the homeserver shouldn't
    # push events anywhere for this extra appservice. If you use a
    # non-spec-compliant server, you may need to put some fake URL here.
    url:
    # Generate random strings for these three fields. Only the as_token really
    # matters, hs_token is never used because there's no url, and the default
    # user (sender_localpart) is never used either.
    as_token: ${SECRET_MAUTRIX_SLACK_DP_AS_TOKEN}
    hs_token: ${SECRET_MAUTRIX_SLACK_DP_HS_TOKEN}
    sender_localpart: ${SECRET_MAUTRIX_SLACK_DP_LOCALPART}
    # Bridges don't like ratelimiting. This should only apply when using the
    # as_token, normal user tokens will still be ratelimited.
    rate_limited: false
    namespaces:
      users:
      # Replace your\.domain with your server name (escape dots for regex)
      - regex: '${SECRET_MAUTRIX_SLACK_REGEX_DOMAIN}'
        # This must be false so the appservice doesn't take over all users completely.
        exclusive: false