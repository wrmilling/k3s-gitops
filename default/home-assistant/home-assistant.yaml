---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: home-assistant
  namespace: default
spec:
  releaseName: home-assistant
  interval: 15m
  chart:
    spec:
      # renovate: registryUrl=https://bjw-s.github.io/helm-charts
      chart: app-template
      version: 1.5.1
      interval: 15m
      sourceRef:
        kind: HelmRepository
        name: bjw-s-helm-charts
        namespace: flux-system
  values:
    image:
      repository: homeassistant/home-assistant
      tag: 2023.9.2@sha256:223c9986ff318eaf35fac70351900cf766c15faf82fbe54150b73b7cfc3c933a
      pullPolicy: IfNotPresent
    strategy:
      type: Recreate
    initContainers:
      init-db:
        image: ghcr.io/onedr0p/postgres-initdb:14.8
        imagePullPolicy: IfNotPresent
        env:
          POSTGRES_DB: home_assistant
          POSTGRES_HOST: home-assistant-psql-v16-rw.default.svc.cluster.local
          POSTGRES_SUPER_PASS: ${SECRET_CNPG_SUPER_PASS}
          POSTGRES_USER: home-assistant
          POSTGRES_PASS: ${SECRET_HASS_DB_PASSWORD}
    env:
      TZ: "America/Chicago"
      HASS_TOKEN: ${SECRET_HASS_TOKEN}
      HASS_POSTGRES_URL: "postgresql://home-assistant:${SECRET_HASS_DB_PASSWORD}@home-assistant-psql-v16-rw.default.svc.cluster.local/home_assistant"
    hostNetwork: true
    dnsPolicy: ClusterFirstWithHostNet
    service:
      main:
        type: LoadBalancer
        loadBalancerIP: ${SVC_HASS_IP}
        ports:
          http:
            port: 8123
          mdns-tcp:
            enabled: true
            port: 5353
            protocol: TCP
            targetPort: 5353
          mdns-udp:
            enabled: true
            port: 5353
            protocol: UDP
            targetPort: 5353
    ingress:
      main:
        enabled: true
        ingressClassName: nginx-external
        annotations:
          kubernetes.io/tls-acme: "true"
          cert-manager.io/cluster-issuer: letsencrypt-prod
        hosts:
        - host: "hass.${SECRET_DOMAIN}"
          paths:
          - path: /
            pathType: Prefix
        tls:
        - hosts:
          - "hass.${SECRET_DOMAIN}"
          secretName: hass-cert
    prometheus:
      serviceMonitor:
        enabled: false
    probes:
      liveness:
        enabled: false
      readiness:
        enabled: false
      startup:
        enabled: true
    persistence:
      config:
        enabled: true
        existingClaim: hass-pvc
    resources:
      limits:
        memory: 3000Mi
      requests:
        cpu: 100m
        memory: 1000Mi
    addons:
      codeserver:
        enabled: true
        image:
          repository: ghcr.io/coder/code-server
          tag: 4.16.1@sha256:5e3cedfc6e029035b0c74364d9bfb89faa896379f284a648c296b7a2425fa015
          pullPolicy: IfNotPresent
        env:
          TZ: "America/Chicago"
          HASS_SERVER: http://localhost:8123
          HASS_TOKEN: ${SECRET_HASS_TOKEN}
        workingDir: "/config"
        args:
            - --user-data-dir
            - "/config/.vscode"
            - --auth
            - "none"
        ingress:
          enabled: true
          ingressClassName: nginx-external
          annotations:
            kubernetes.io/tls-acme: "true"
            cert-manager.io/cluster-issuer: letsencrypt-prod
            nginx.ingress.kubernetes.io/auth-signin: "https://auth.${SECRET_DOMAIN}"
            nginx.ingress.kubernetes.io/auth-url: "https://auth.${SECRET_DOMAIN}/api/verify"
          hosts:
          - host: "hass-vscode.${SECRET_DOMAIN}"
            paths:
            - path: /
              pathType: Prefix
          tls:
          - hosts:
            - "hass-vscode.${SECRET_DOMAIN}"
            secretName: hass-vscode-cert
        volumeMounts:
        - name: config
          mountPath: /config
